load(
    "//ign_bazel:build_defs.bzl",
    "IGNITION_FEATURES",
    "IGNITION_ROOT",
    "IGNITION_VISIBILITY",
    "cmake_configure_file",
    "generate_include_header",
    "ign_config_header",
    "ign_export_header",
)

package(
    default_visibility = IGNITION_VISIBILITY,
    features = IGNITION_FEATURES,
)

licenses(["notice"])

exports_files(["LICENSE"])

PROJECT_NAME = "ignition-sensors"

PROJECT_MAJOR = 4

PROJECT_MINOR = 0

PROJECT_PATCH = 0

# Generates config.hh based on the version numbers in CMake code.
ign_config_header(
    name = "config",
    src = "include/ignition/sensors/config.hh.in",
    cmakelists = ["CMakeLists.txt"],
    extra_defines = [
        "IGN_SENSORS_PLUGIN_PATH=ign_sensors/",
        "PROJECT_LIBRARY_TARGET_NAME=ignition-sensors",
    ],
    project_name = PROJECT_NAME,
    project_version = (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),
)

sensors = [
    "AirPressureSensor",
    "AltimeterSensor",
    "CameraSensor",
    "DepthCameraSensor",
    "GpuLidarSensor",
    "ImuSensor",
    "Lidar",
    "LogicalCameraSensor",
    "MagnetometerSensor",
    "RenderingSensor",
    "RgbdCameraSensor",
    "ThermalCameraSensor",
]

# NOTE the below sensors names MUST correspond to the above sensors by index
sensor_names = [
    "air_pressure",
    "altimeter",
    "camera",
    "depth_camera",
    "gpu_lidar",
    "imu",
    "lidar",
    "logical_camera",
    "magnetometer",
    "rendering",
    "rgbd_camera",
    "thermal_camera",
]

ign_export_header(
    name = "include/ignition/sensors/Export.hh",
    export_base = "IGNITION_SENSORS",
    lib_name = "ignition-sensors",
    visibility = ["//visibility:private"],
)

[
    ign_export_header(
        name = "include/ignition/sensors/%s/Export.hh" % sensor,
        export_base = "IGNITION_SENSORS_%s" % sensor.upper(),
        lib_name = "ignition-sensors",
        visibility = ["//visibility:private"],
    )
    for sensor in sensor_names
]

sensor_sources = ["src/%s.cc" % sensor for sensor in sensors]

sensor_headers = ["include/ignition/sensors/%s.hh" % sensor for sensor in sensors]

public_headers_no_gen = [
    "include/ignition/sensors/GaussianNoiseModel.hh",
    "include/ignition/sensors/ImageGaussianNoiseModel.hh",
    "include/ignition/sensors/ImageNoise.hh",
    "include/ignition/sensors/Manager.hh",
    "include/ignition/sensors/Noise.hh",
    "include/ignition/sensors/RenderingEvents.hh",
    "include/ignition/sensors/Sensor.hh",
    "include/ignition/sensors/SensorFactory.hh",
    "include/ignition/sensors/SensorTypes.hh",
    "src/PointCloudUtil.hh",
] + sensor_headers

sources = [
    "src/GaussianNoiseModel.cc",
    "src/ImageGaussianNoiseModel.cc",
    "src/ImageNoise.cc",
    "src/Manager.cc",
    "src/Noise.cc",
    "src/PointCloudUtil.cc",
    "src/RenderingSensor.cc",
    "src/RenderingEvents.cc",
    "src/Sensor.cc",
    "src/SensorFactory.cc",
    "src/SensorTypes.cc",
]

sensor_exports = [
    "include/ignition/sensors/Export.hh",
] + ["include/ignition/sensors/%s/Export.hh" % sensor for sensor in sensor_names]

generate_include_header(
    name = "sensorshh_genrule",
    out = "include/ignition/sensors.hh",
    hdrs = public_headers_no_gen + [
        "include/ignition/sensors/config.hh",
    ] + sensor_exports,
)

public_headers = public_headers_no_gen + [
    "include/ignition/sensors/config.hh",
    "include/ignition/sensors.hh",
] + sensor_exports

cc_library(
    name = "ign_sensors",
    srcs = sources,
    hdrs = public_headers,
    defines = [
        "WITH_OGRE2=1",
    ],
    includes = ["include"],
    deps = [
        IGNITION_ROOT + "ign_common",
        IGNITION_ROOT + "ign_common/events",
        IGNITION_ROOT + "ign_common/profiler",
        IGNITION_ROOT + "ign_msgs",
        IGNITION_ROOT + "ign_rendering",
        IGNITION_ROOT + "ign_transport",
        IGNITION_ROOT + "sdformat",
    ],
)

cc_binary(
    name = "libignition-sensors4.so",
    srcs = [":ign_sensors"],
    includes = ["include"],
    linkshared = True,
)

[
    cc_library(
        name = "sensors_" + sensor_names[index],
        srcs = [
            "src/%s.cc" % sensor,
            "include/ignition/sensors/%s.hh" % sensor,
        ],
        includes = ["include"],
        deps = [
            ":ign_sensors",
        ],
    )
    for index, sensor in enumerate(sensors)
]

[
    cc_binary(
        name = "libignition-sensors-%s.so" % sensor_names[index],
        srcs = [":sensors_" + sensor_names[index]],
        includes = ["include"],
        linkshared = True,
    )
    for index, sensor in enumerate(sensors)
]

cc_test(
    name = "ImuSensor_TEST",
    srcs = ["src/ImuSensor_TEST.cc"],
    data = [":libignition-sensors-imu.so"],
    deps = [
        ":sensors_imu",
        "@gtest",
        "@gtest//:gtest_main",
    ],
)

cc_test(
    name = "Camera_TEST",
    srcs = ["src/Camera_TEST.cc"],
    data = [":libignition-sensors-camera.so"],
    deps = [
        ":sensors_camera",
        "@gtest",
        "@gtest//:gtest_main",
    ],
)

cc_test(
    name = "Lidar_TEST",
    srcs = ["src/Lidar_TEST.cc"],
    data = [":libignition-sensors-lidar.so"],
    deps = [
        ":sensors_lidar",
        "@gtest",
        "@gtest//:gtest_main",
    ],
)

cc_test(
    name = "Manager_TEST",
    srcs = ["src/Manager_TEST.cc"],
    deps = [
        ":ign_sensors",
        "@gtest",
        "@gtest//:gtest_main",
    ],
)

cc_test(
    name = "Noise_TEST",
    srcs = ["src/Noise_TEST.cc"],
    deps = [
        ":ign_sensors",
        "@gtest",
        "@gtest//:gtest_main",
    ],
)

cc_test(
    name = "Sensor_TEST",
    srcs = ["src/Sensor_TEST.cc"],
    deps = [
        ":ign_sensors",
        "@gtest",
        "@gtest//:gtest_main",
    ],
)

cmake_configure_file(
    name = "test_config",
    src = "test/test_config.h.in",
    out = "test/test_config.h",
    cmakelists = ["test/CMakeLists.txt"],
    defines = [
        "PROJECT_SOURCE_DIR=./ign_sensors",
        "PROJECT_BINARY_DIR=./ign_sensors",
        "CMAKE_BINARY_DIR=./ign_sensors",
        "WITH_OGRE2=1",
    ],
)

cc_library(
    name = "test_util",
    hdrs = [
        "src/PointCloudUtil.hh",
        "test/integration/TransportTestTools.hh",
        "test/test_config.h",
    ],
    data = glob(["test/integration/*.sdf"]),
    includes = [
        "src",
        "test",
        "test/integration",
    ],
)

plugins = [
    "air_pressure",
    "altimeter",
    "imu",
    "logical_camera",
    "magnetometer",
]

[
    cc_test(
        name = "INTEGRATION_%s_plugin" % plugin,
        srcs = ["test/integration/%s_plugin.cc" % plugin],
        data = [":libignition-sensors-%s.so" % plugin],
        deps = [
            ":sensors_%s" % plugin,
            ":test_util",
            "@gtest",
            "@gtest//:gtest_main",
        ],
    )
    for plugin in plugins
]

dri_plugins = [
    "camera",
    "depth_camera",
    "gpu_lidar",
    "rgbd_camera",
    "thermal_camera",
]

[
    cc_test(
        name = "INTEGRATION_%s_plugin" % plugin,
        srcs = ["test/integration/%s_plugin.cc" % plugin],
        data = [
            ":libignition-sensors-%s.so" % plugin,
            IGNITION_ROOT + "ign_rendering/ogre2:libignition-rendering-ogre2.so",
        ],
        deps = [
            ":ign_sensors",
            ":sensors_camera",
            ":sensors_depth_camera",
            ":sensors_gpu_lidar",
            ":sensors_lidar",
            ":sensors_rgbd_camera",
            ":sensors_thermal_camera",
            ":test_util",
            "@gtest",
            "@gtest//:gtest_main",
        ],
    )
    for plugin in dri_plugins
]
